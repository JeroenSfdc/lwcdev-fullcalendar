/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const getHelper = require('@babel/helpers').get;
const t = require('@babel/types');
const generate = require('@babel/generator').default;

/**
 * List of all the supported babel helpers.
 */
const SUPPORTED_HELPERS = [
    'applyDecoratedDescriptor',
    'arrayLikeToArray',
    'arrayWithHoles',
    'arrayWithoutHoles',
    'assertThisInitialized',
    'AsyncGenerator',
    'asyncGeneratorDelegate',
    'asyncIterator',
    'asyncToGenerator',
    'awaitAsyncGenerator',
    'AwaitValue',
    'classApplyDescriptorDestructureSet',
    'classApplyDescriptorGet',
    'classApplyDescriptorSet',
    'classCallCheck',
    'classCheckPrivateStaticAccess',
    'classCheckPrivateStaticFieldDescriptor',
    'classExtractFieldDescriptor',
    'classNameTDZError',
    'classPrivateFieldDestructureSet',
    'classPrivateMethodGet',
    'classPrivateMethodSet',
    'classStaticPrivateFieldDestructureSet',
    'classStaticPrivateFieldSpecGet',
    'classStaticPrivateFieldSpecSet',
    'classStaticPrivateMethodGet',
    'classStaticPrivateMethodSet',
    'construct',
    'createClass',
    'createForOfIteratorHelper',
    'createForOfIteratorHelperLoose',
    'createSuper',
    'decorate',
    'defaults',
    'defineEnumerableProperties',
    'defineProperty',
    'extends',
    'get',
    'getPrototypeOf',
    'inherits',
    'inheritsLoose',
    'initializerDefineProperty',
    'initializerWarningHelper',
    'instanceof',
    'isNativeFunction',
    'isNativeReflectConstruct',
    'iterableToArray',
    'iterableToArrayLimit',
    'iterableToArrayLimitLoose',
    'jsx',
    'maybeArrayLike',
    'newArrowCheck',
    'nonIterableRest',
    'nonIterableSpread',
    'objectDestructuringEmpty',
    'objectSpread',
    'objectSpread2',
    'objectWithoutProperties',
    'objectWithoutPropertiesLoose',
    'possibleConstructorReturn',
    'readOnlyError',
    'set',
    'setPrototypeOf',
    'skipFirstGeneratorNext',
    'slicedToArray',
    'slicedToArrayLoose',
    'superPropBase',
    'taggedTemplateLiteral',
    'taggedTemplateLiteralLoose',
    'tdz',
    'temporalRef',
    'temporalUndefined',
    'toArray',
    'toConsumableArray',
    'toPrimitive',
    'toPropertyKey',
    'typeof',
    'unsupportedIterableToArray',
    'wrapAsyncGenerator',
    'wrapNativeSuper',
    'wrapRegExp',
    'writeOnlyError',
];

// Helpers that do not need any COMPAT transform
const PURE_HELPERS = ['classCallCheck'];

const helpers = SUPPORTED_HELPERS;
const pureHelpers = PURE_HELPERS;

// Transform the nested helpers to be relative so we dont need intrinsic dependencies
function tranformRelativeImports(helperRoot) {
    helperRoot.nodes.forEach((node) => {
        if (t.isImportDeclaration(node)) {
            node.source.value = `./${node.source.value}`;
        }
    });
    return helperRoot;
}

function generateHelperAST(helperName) {
    if (SUPPORTED_HELPERS.includes(helperName)) {
        const helperNodes = getHelper(helperName);
        return tranformRelativeImports(helperNodes);
    }
}

function generateHelperSource(helperName) {
    const helperAstNode = generateHelperAST(helperName);
    const helperAstRoot = helperAstNode.nodes;
    const program = t.program(helperAstRoot, undefined, 'module');
    return generate(program).code;
}

function isPureHelper(helperName) {
    return PURE_HELPERS.includes(helperName);
}

module.exports = {
    helpers: helpers,
    pureHelpers,
    generateHelperAST,
    isPureHelper,
    generateHelperSource,
};
