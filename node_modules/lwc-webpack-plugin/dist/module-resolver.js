"use strict";
exports.__esModule = true;
exports.LwcModuleResolverPlugin = void 0;
var path_1 = require("path");
var lwcResolver = require('@lwc/module-resolver');
var EMPTY_STYLE = path_1.resolve(__dirname, 'mocks', 'empty-style.js');
/**
 * Webpack plugin to resolve LWC modules.
 */
var LwcModuleResolverPlugin = /** @class */ (function () {
    function LwcModuleResolverPlugin(modules) {
        this.modules = modules;
    }
    LwcModuleResolverPlugin.prototype.apply = function (resolver) {
        var _this = this;
        this.fs = resolver.fileSystem;
        resolver.hooks.module.tapAsync('LWC module', function (req, ctx, cb) { return _this.resolveModule(req, ctx, cb); });
        resolver.hooks.file.tapAsync('LWC CSS', function (req, ctx, cb) {
            return _this.resolveFile(req, ctx, cb);
        });
    };
    LwcModuleResolverPlugin.prototype.resolveModule = function (req, ctx, cb) {
        var request = req.request, 
        // eslint-disable-next-line prefer-const
        query = req.query, issuer = req.context.issuer;
        try {
            if (!issuer) {
                issuer = process.cwd();
            }
            request = request.replace('./', '');
            var mod = void 0;
            if (this.modules && this.modules.length) {
                mod = lwcResolver.resolveModule(request, issuer, {
                    modules: this.modules
                });
            }
            else {
                mod = lwcResolver.resolveModule(request, issuer);
            }
            return cb(undefined, {
                path: mod.entry,
                query: query,
                file: true,
                resolved: true
            });
        }
        catch (e) {
            // LWC Module Resolver will throw errors for any non lwc modules
            cb();
        }
    };
    LwcModuleResolverPlugin.prototype.isImplicitHTMLImport = function (importee, importer) {
        return (path_1.extname(importer) === '.js' &&
            path_1.extname(importee) === '.html' &&
            path_1.dirname(importer) === path_1.dirname(importee) &&
            path_1.basename(importer, '.js') === path_1.basename(importee, '.html'));
    };
    LwcModuleResolverPlugin.prototype.resolveFile = function (req, ctx, cb) {
        var _this = this;
        var resourcePath = req.path, query = req.query;
        var extFilename = path_1.extname(resourcePath);
        if (extFilename !== '.css' && extFilename !== '.html') {
            return cb();
        }
        this.fs.stat(resourcePath, function (err) {
            if (err !== null && err.code === 'ENOENT') {
                if (extFilename === '.css' ||
                    _this.isImplicitHTMLImport(resourcePath, req.context.issuer)) {
                    return cb(null, {
                        path: EMPTY_STYLE,
                        query: query,
                        file: true,
                        resolved: false
                    });
                }
            }
            return cb();
        });
    };
    return LwcModuleResolverPlugin;
}());
exports.LwcModuleResolverPlugin = LwcModuleResolverPlugin;
