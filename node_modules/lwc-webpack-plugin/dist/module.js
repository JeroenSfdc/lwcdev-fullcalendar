"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var path_1 = require("path");
function getConfig(opts) {
    if (!opts || !opts.module || typeof opts.module.path !== 'string') {
        throw new TypeError("module.path expects a string value. Received " + opts.module.path);
    }
    var moduleConfig = __assign({}, opts.module);
    return __assign(__assign({}, opts), { module: moduleConfig });
}
function isValidModuleName(id) {
    return id.match(/^(\w+\/)(\w+)$/);
}
function getInfoFromId(id) {
    var _a = id.split('/'), ns = _a[0], rest = _a.slice(1);
    return {
        ns: ns,
        name: rest.join('/')
    };
}
function getInfoFromPath(file, root) {
    if (!file.startsWith(root)) {
        var jsFile = file;
        if (!file.endsWith('.js')) {
            var split = file.split('.');
            jsFile = split.slice(0, -1).join('.') + '.js';
        }
        var parent_1 = path_1.dirname(file).split('/').pop();
        var baseFilename = path_1.basename(file).split('.').slice(0, -1).join('.');
        if (parent_1 !== baseFilename) {
            jsFile = path_1.resolve(path_1.dirname(file), parent_1 + ".js");
        }
        throw new Error("Invalid file  " + file + " is not part of " + root);
    }
    var rel = path_1.relative(root, file);
    var parts = rel.split(path_1.sep);
    var id = parts[2] + "-" + parts[3];
    return getInfoFromId(id);
}
module.exports = {
    getConfig: getConfig,
    isValidModuleName: isValidModuleName,
    getInfoFromId: getInfoFromId,
    getInfoFromPath: getInfoFromPath
};
