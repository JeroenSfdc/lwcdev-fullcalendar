"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const config_1 = require("./config");
const help_1 = require("./help");
const log = (message = '', ...args) => {
    // tslint:disable-next-line strict-type-predicates
    message = typeof message === 'string' ? message : util_1.inspect(message);
    process.stdout.write(util_1.format(message, ...args) + '\n');
};
const helpOverride = (argv, config) => {
    if (argv.length === 0 && !config.pjson.oclif.default)
        return true;
    for (const arg of argv) {
        if (arg === '--help')
            return true;
        if (arg === '--')
            return false;
    }
    return false;
};
const versionOverride = (argv) => {
    if (['--version'].includes(argv[0]))
        return true;
    return false;
};
async function run(argv = process.argv.slice(2), options) {
    // return Main.run(argv, options)
    const config = await config_1.Config.load(options || (module.parent && module.parent.parent && module.parent.parent.filename) || __dirname);
    // run init hook
    if (config.topicSeparator !== ':')
        argv = help_1.standarizeIDFromArgv(argv, config);
    let [id, ...argvSlice] = argv;
    await config.runHook('init', { id, argv: argvSlice });
    // display version if applicable
    if (versionOverride(argv)) {
        log(config.userAgent);
        return;
    }
    // display help version if applicable
    if (helpOverride(argv, config)) {
        argv = argv.filter(arg => {
            if (arg === '--help')
                return false;
            return true;
        });
        const Help = help_1.getHelpClass(config);
        const help = new Help(config);
        help.showHelp(argv);
        return;
    }
    // find & run command
    const cmd = config.findCommand(id);
    if (!cmd) {
        const topic = config.findTopic(id);
        if (topic)
            return config.runCommand('help', [id]);
        if (config.pjson.oclif.default) {
            id = config.pjson.oclif.default;
            argvSlice = argv;
        }
    }
    await config.runCommand(id, argvSlice, cmd);
}
exports.run = run;
