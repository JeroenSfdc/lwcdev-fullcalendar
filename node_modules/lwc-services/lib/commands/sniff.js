"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const fs_1 = require("fs");
const path_1 = require("path");
const util = require("util");
const webpack_merge_1 = require("webpack-merge");
const jestConfig_1 = require("../config/jestConfig");
const lwcConfig_1 = require("../config/lwcConfig");
const webpack_config_1 = require("../config/webpack.config");
const sniff_1 = require("../messages/sniff");
const logger_1 = require("../utils/logger");
const rollupConfig = path_1.resolve(__dirname, '../config/rollup.config.js');
class Sniff extends command_1.Command {
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    async run() {
        const { flags } = this.parse(Sniff);
        // eslint-disable-next-line no-console
        console.clear();
        logger_1.welcome();
        if (!flags.directory) {
            logger_1.log(sniff_1.messages.errors.nodirectory);
            return;
        }
        if (!fs_1.existsSync(flags.directory)) {
            fs_1.mkdirSync(flags.directory);
        }
        logger_1.log(sniff_1.messages.logs.calculating_configurations);
        let webpackConfig = webpack_config_1.generateWebpackConfig();
        if (flags.webpack) {
            // Merging custom webpack config file
            logger_1.log(sniff_1.messages.logs.custom_configuration);
            const webpackConfigCustom = require(path_1.resolve(process.cwd(), flags.webpack));
            let mergeFunction;
            if (flags['webpack-plugin-overrides']) {
                mergeFunction = webpack_merge_1.mergeWithCustomize({
                    customizeArray: webpack_merge_1.unique('plugins', flags['webpack-plugin-overrides'].split(','), (plugin) => plugin.constructor && plugin.constructor.name)
                });
            }
            else {
                mergeFunction = webpack_merge_1.merge;
            }
            webpackConfig = mergeFunction(webpackConfig, webpackConfigCustom);
        }
        logger_1.log(sniff_1.messages.logs.write_jest_config);
        const inspectOptions = { depth: null };
        fs_1.writeFileSync(path_1.join(flags.directory, 'jest.config.js'), 'module.exports = ' + util.inspect(jestConfig_1.jestConfig, inspectOptions));
        logger_1.log(sniff_1.messages.logs.write_webpack_config);
        fs_1.writeFileSync(path_1.join(flags.directory, 'webpack.config.js'), 'module.exports = ' + util.inspect(webpackConfig, inspectOptions));
        logger_1.log(sniff_1.messages.logs.write_rollup_config);
        fs_1.copyFileSync(rollupConfig, path_1.join(flags.directory, 'rollup.config.js'));
        logger_1.log(sniff_1.messages.logs.write_lwc_config);
        fs_1.writeFileSync(path_1.join(flags.directory, 'lwc-services.config.js'), 'module.exports = ' + util.inspect(lwcConfig_1.defaultLwcConfig, inspectOptions));
        logger_1.log(sniff_1.messages.logs.enjoy);
    }
}
exports.default = Sniff;
Sniff.description = sniff_1.messages.description;
Sniff.examples = sniff_1.messages.help.examples;
Sniff.flags = {
    help: command_1.flags.help({ char: 'h' }),
    directory: command_1.flags.string({
        char: 'd',
        description: sniff_1.messages.flags.directory,
        required: true
    }),
    webpack: command_1.flags.string({
        char: 'w',
        description: sniff_1.messages.flags.webpack
    }),
    'webpack-plugin-overrides': command_1.flags.string({
        description: sniff_1.messages.flags['webpack-plugin-overrides']
    })
};
