"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateWebpackConfig = void 0;
const { buildWebpackConfig } = require('../utils/webpack/webpack-builder');
const CopyPlugin = require('copy-webpack-plugin');
const ErrorOverlayPlugin = require('error-overlay-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const LwcWebpackPlugin = require('lwc-webpack-plugin');
const path_1 = require("path");
const fs_1 = require("fs");
const lwcConfig_1 = require("./lwcConfig");
const ROOT_DIR = process.cwd();
const OUTPUT_DIR = path_1.resolve(ROOT_DIR, lwcConfig_1.lwcConfig.buildDir);
const TEMPLATES_DIR = path_1.resolve(ROOT_DIR, lwcConfig_1.lwcConfig.sourceDir);
let ENTRIES = path_1.resolve(TEMPLATES_DIR, 'index.js');
if (!ENTRIES || !fs_1.existsSync(ENTRIES)) {
    ENTRIES = path_1.resolve(TEMPLATES_DIR, 'index.ts');
}
const JS_LOADER = {
    test: /\.js$/,
    exclude: /node_modules/,
    use: {
        loader: require.resolve('babel-loader'),
        options: {
            plugins: [
                require.resolve('@babel/plugin-proposal-object-rest-spread'),
                require.resolve('@babel/plugin-syntax-class-properties')
            ],
            babelrc: false
        }
    }
};
const TS_LOADER = {
    test: /\.ts$/,
    exclude: /node_modules/,
    use: {
        loader: require.resolve('babel-loader'),
        options: {
            plugins: [
                require.resolve('@babel/plugin-syntax-class-properties'),
                [
                    require.resolve('@babel/plugin-syntax-decorators'),
                    {
                        decoratorsBeforeExport: true
                    }
                ]
            ],
            presets: [require.resolve('@babel/preset-typescript')]
        }
    }
};
// Simple mechanism to pass any arbitrary config values from the CLI for webpack
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function generateWebpackConfig(mode, customConfig) {
    const lwcWebpackConfig = buildWebpackConfig({
        entries: [ENTRIES],
        outputDir: OUTPUT_DIR,
        mode,
        customConfig
    });
    lwcWebpackConfig.module = {
        rules: [JS_LOADER, TS_LOADER]
    };
    lwcWebpackConfig.plugins = (lwcWebpackConfig.plugins || []).concat([
        new HtmlWebpackPlugin({
            template: path_1.resolve(TEMPLATES_DIR, 'index.html')
        })
    ]);
    lwcWebpackConfig.plugins = (lwcWebpackConfig.plugins || []).concat([
        new LwcWebpackPlugin({
            stylesheetConfig: lwcConfig_1.lwcConfig.lwcCompilerStylesheetConfig,
            outputConfig: lwcConfig_1.lwcConfig.lwcCompilerOutput.production,
            experimentalDynamicComponent: lwcConfig_1.lwcConfig.lwcExperimentalDynamicComponent
        })
    ]);
    if (lwcConfig_1.lwcConfig.resources.length) {
        const resources = [];
        lwcConfig_1.lwcConfig.resources.forEach((resource) => {
            resources.push({
                from: path_1.resolve(process.cwd(), resource.from),
                to: path_1.join(process.cwd(), resource.to)
            });
        });
        lwcWebpackConfig.plugins = (lwcWebpackConfig.plugins || []).concat([
            new CopyPlugin({ patterns: resources })
        ]);
    }
    // error-overlay-webpack-plugin has a bug that breaks the build when > 1 entry point is specified
    if (Object.keys(lwcWebpackConfig.entry).length == 1) {
        lwcWebpackConfig.plugins = (lwcWebpackConfig.plugins || []).concat([
            // TODO Test potential alternatives for multiple entries
            new ErrorOverlayPlugin()
        ]);
    }
    return lwcWebpackConfig;
}
exports.generateWebpackConfig = generateWebpackConfig;
