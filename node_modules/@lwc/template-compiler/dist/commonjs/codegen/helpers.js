"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTemplateMetadata = exports.memorizeHandler = exports.shouldFlatten = exports.containsDynamicChildren = exports.objectToAST = exports.getMemberExpressionRoot = exports.identifierFromComponentName = void 0;
const t = __importStar(require("../shared/estree"));
const utils_1 = require("../shared/utils");
const types_1 = require("../shared/types");
const ir_1 = require("../shared/ir");
const constants_1 = require("../shared/constants");
function identifierFromComponentName(name) {
    return t.identifier(`_${utils_1.toPropertyName(name)}`);
}
exports.identifierFromComponentName = identifierFromComponentName;
function getMemberExpressionRoot(expression) {
    let current = expression;
    while (t.isMemberExpression(current)) {
        current = current.object;
    }
    return current;
}
exports.getMemberExpressionRoot = getMemberExpressionRoot;
function objectToAST(obj, valueMapper) {
    return t.objectExpression(Object.keys(obj).map((key) => t.property(t.literal(key), valueMapper(key))));
}
exports.objectToAST = objectToAST;
function isDynamic(element) {
    var _a;
    return ((_a = element.lwc) === null || _a === void 0 ? void 0 : _a.dynamic) !== undefined;
}
function containsDynamicChildren(children) {
    return children.some((child) => ir_1.isElement(child) && isDynamic(child));
}
exports.containsDynamicChildren = containsDynamicChildren;
function shouldFlatten(children, state) {
    return children.some((child) => ir_1.isElement(child) &&
        (isDynamic(child) ||
            !!child.forEach ||
            !!child.forOf ||
            (state.renderMode === 'light' && child.tag === 'slot') ||
            (ir_1.isTemplate(child) && shouldFlatten(child.children, state))));
}
exports.shouldFlatten = shouldFlatten;
function memorizeHandler(codeGen, element, componentHandler, handler) {
    // #439 - The handler can only be memorized if it is bound to component instance
    const id = getMemberExpressionRoot(componentHandler);
    const shouldMemorizeHandler = ir_1.isComponentProp(id, element);
    // Apply memorization if the handler is memorizable.
    //   $cmp.handlePress -> _m1 || ($ctx._m1 = b($cmp.handlePress))
    if (shouldMemorizeHandler) {
        const memorizedId = codeGen.getMemorizationId();
        const memorization = t.assignmentExpression('=', t.memberExpression(t.identifier(constants_1.TEMPLATE_PARAMS.CONTEXT), memorizedId), handler);
        handler = t.logicalExpression('||', memorizedId, memorization);
    }
    return handler;
}
exports.memorizeHandler = memorizeHandler;
function generateTemplateMetadata(state) {
    const metadataExpressions = [];
    if (state.slots.length) {
        const slotsProperty = t.memberExpression(t.identifier(constants_1.TEMPLATE_FUNCTION_NAME), t.identifier('slots'));
        const slotsArray = t.arrayExpression(state.slots.map((slot) => t.literal(slot)));
        const slotsMetadata = t.assignmentExpression('=', slotsProperty, slotsArray);
        metadataExpressions.push(t.expressionStatement(slotsMetadata));
    }
    const stylesheetsMetadata = t.assignmentExpression('=', t.memberExpression(t.identifier(constants_1.TEMPLATE_FUNCTION_NAME), t.identifier('stylesheets')), t.arrayExpression([]));
    metadataExpressions.push(t.expressionStatement(stylesheetsMetadata));
    // ignore when shadow because we don't want to modify template unnecessarily
    if (state.renderMode === types_1.LWCDirectiveRenderMode.light) {
        const renderModeMetadata = t.assignmentExpression('=', t.memberExpression(t.identifier(constants_1.TEMPLATE_FUNCTION_NAME), t.identifier('renderMode')), t.literal('light'));
        metadataExpressions.push(t.expressionStatement(renderModeMetadata));
    }
    return metadataExpressions;
}
exports.generateTemplateMetadata = generateTemplateMetadata;
//# sourceMappingURL=helpers.js.map