import * as t from '../shared/estree';
export default class CodeGen {
    currentId: number;
    currentKey: number;
    usedApis: {
        [name: string]: t.Identifier;
    };
    usedSlots: {
        [name: string]: t.Identifier;
    };
    memorizedIds: t.Identifier[];
    generateKey(): number;
    genElement(tagName: string, data: t.ObjectExpression, children: t.Expression): import("estree").CallExpression;
    genCustomElement(tagName: string, componentClass: t.Identifier, data: t.ObjectExpression, children: t.Expression): import("estree").CallExpression;
    genDynamicElement(tagName: string, ctor: t.Expression, data: t.ObjectExpression, children: t.Expression): import("estree").CallExpression;
    genText(value: string | t.Expression): t.Expression;
    genComment(value: string): t.Expression;
    genIterator(iterable: t.Expression, callback: t.FunctionExpression): import("estree").CallExpression;
    genBind(handler: t.Expression): import("estree").CallExpression;
    genFlatten(children: t.Expression[]): import("estree").CallExpression;
    genKey(compilerKey: t.SimpleLiteral, value: t.Expression): import("estree").CallExpression;
    genScopedId(id: string | t.Expression): t.CallExpression;
    genScopedFragId(id: string | t.Expression): t.CallExpression;
    getSlot(slotName: string, data: t.ObjectExpression, children: t.Expression): import("estree").CallExpression;
    genTabIndex(children: [t.Expression]): import("estree").CallExpression;
    getMemorizationId(): import("estree").Identifier;
    genBooleanAttributeExpr(bindExpr: t.Expression): import("estree").ConditionalExpression;
    private _genUniqueIdentifier;
    private _toValidIdentifier;
    private _renderApiCall;
}
