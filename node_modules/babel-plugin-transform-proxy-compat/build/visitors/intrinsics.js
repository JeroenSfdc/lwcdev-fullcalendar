"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var t = __importStar(require("@babel/types"));
var expression_matcher_1 = __importDefault(require("../utils/expression-matcher"));
/**
 * List of the intrisic properties to rewrite for compat.
 */
var INTRINSICS_TO_REWRITE = [
    // Object.prototype properties
    {
        object: 'Object.prototype',
        name: 'hasOwnProperty',
        compatName: 'compatHasOwnProperty',
    },
    // Object properties
    {
        object: 'Object',
        name: 'keys',
        compatName: 'compatKeys',
    },
    {
        object: 'Object',
        name: 'assign',
        compatName: 'compatAssign',
    },
    {
        object: 'Object',
        name: 'getOwnPropertyDescriptor',
        compatName: 'compatGetOwnPropertyDescriptor',
    },
    {
        object: 'Object',
        name: 'defineProperty',
        compatName: 'compatDefineProperty',
    },
    {
        object: 'Object',
        name: 'values',
        compatName: 'compatValues',
    },
    {
        object: 'Object',
        name: 'entries',
        compatName: 'compatEntries',
    },
    // Array.prototype properties
    {
        object: 'Array.prototype',
        name: 'push',
        compatName: 'compatPush',
    },
    {
        object: 'Array.prototype',
        name: 'unshift',
        compatName: 'compatUnshift',
    },
    {
        object: 'Array.prototype',
        name: 'concat',
        compatName: 'compatConcat',
    },
    // Array properties
    {
        object: 'Array',
        name: 'isArray',
        compatName: 'compatIsArray',
    },
    // Literal properties
    {
        object: '{}',
        name: 'hasOwnProperty',
        compatName: 'compatHasOwnProperty',
    },
    {
        object: '[]',
        name: 'hasOwnProperty',
        compatName: 'compatHasOwnProperty',
    },
];
exports.default = {
    MemberExpression: function (path) {
        var memberExpression = path.node;
        for (var _i = 0, INTRINSICS_TO_REWRITE_1 = INTRINSICS_TO_REWRITE; _i < INTRINSICS_TO_REWRITE_1.length; _i++) {
            var _a = INTRINSICS_TO_REWRITE_1[_i], object = _a.object, name = _a.name, compatName = _a.compatName;
            var matchExpression = expression_matcher_1.default(object + "." + name);
            if (matchExpression(memberExpression)) {
                memberExpression.property = t.identifier(compatName);
                memberExpression.computed = false;
                // Early exit if the member expression has been rewritten
                path.stop();
            }
        }
    },
};
//# sourceMappingURL=module.js.map